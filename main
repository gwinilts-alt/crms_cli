#!php
<?php

define("_SQL_DATE", "Y-m-d H:i:s");
define("_FILE_DATE", "d/m/Y-H:i:s");


// required for qc

require_once("qc_lib/lib/protect/sql-auth.php");
require_once("qc_lib/lib/qc-data-types/const/qcdb.php");

require_once("lib/shell.php");
require_once("lib/qcutil.php");
require_once("lib/rmsutil.php");
require_once("lib/qcrms.php");
require_once("lib/countrms/include.php");
require_once("lib/checkrms/include.php");
require_once("lib/sixfer/include.php");


class My extends Shell {

    public static function help(): void {
        self::writeln("Usage: " . self::$instanceName, " -[count|check|ppsearch|sisearch|rhinfo|siinfo] -[other options]");
        self::writeln("  -count");
        self::writeln("\tenters stock check mode. This will count aloud as items are scanned with a scanner.\r\n\tTry -count with no other options for more info.");
        self::writeln("  -check");
        self::writeln("\tprocesses a file produced by -count along with a stock-check list from current [all-stock.csv] and produces a list of checked stock.\r\n\tTry -check with no options for more info.");
        self::writeln("  -ppsearch [some string]");
        self::writeln("\tsearches for and displays a list of product codes that match [some string]\r\n\te.g -ppsearch 'CF016A%' finds any product that starts with CF016A");
        self::writeln("  -sisearch [some string]");
        self::writeln("\tsearches for and displays a list of items whose barcodes match [some string]\r\n\te.g -sisearch '610___' OR -sisearch '610%' finds any item that starts with 610'");
        self::writeln("  -rhq [some product code] displays a list of items whose product code matches [some product code] that have been tested within 1 year of today.");
        self::writeln("  -sixfer\r\n\texports the state of QCCheck in the form of:\r\n\tupd.csv items that have been updated.\r\n\tnew.csv items that have not existed before.");
        self::writeln("  -siinfo -g [product code] [item code]\r\n\tdisplays info about the first item matched by [item code] which is an item of [product code]");
        self::writeln("IF there was it was undocumented.");
    }

    public static function main(): int {
        if (self::hasArg("help")) {
            self::help();
            return 0;
        }
        if (self::hasArg("count")) {
            return CountRMS::main();
        }
        if (self::hasArg("check")) {
            return CheckRMS::main();
        }
        if (self::hasArg("_vsi")) {
            self::writeln(implode("\n", QCDB::colDump("StkItem")));
            return 0;
        }
        if (self::hasArg("_vsic")) {
            self::writeln(QC::siICount(self::arg("_vsic")));
        }
        if (self::hasArg("_vpp")) {
            self::writeln(implode("\n", QCDB::colDump("ProdPattern")));
            return 0;
        }
        if (self::hasArg("ppsearch")) {
            $qx = self::arg("ppsearch");
            $x = 0;
            foreach (QC::ppMatch($qx) as $v) {
                self::writeln($v);
                $x ++;
            }
            self::writeln("Matched $x.");
            return 0;
        }
        if (self::hasArg("sisearch")) {
            $qx = self::arg("sisearch");
            $x = 0;
            foreach (QC::siMatch($qx) as $v) {
                self::writeln($v);
                $x++;
            }
            self::writeln("Matched $x.");
            return 0;
        }
        if (self::hasArg("rhq")) {
            $rh = QC::results1y(self::arg("rhq"));

            foreach ($rh as $item) {
                self::write($item . "\r\n");
            }
            return 0;
        }
        if (self::hasArg("sixfer")) {
            return SiXfer::main();
        }
        if (self::hasArg("rhinfo")) {
            if (self::hasArg("g")) {
                $g = self::arg("g");
            } else {
                $g = "%";
            }

            if (self::hasArg("after")) {
                $after = DateTime::createFromFormat(_FILE_DATE, self::arg("after"));
            } else {
                $after = DateTime::createFromFormat(_FILE_DATE, "01/01/1997-07:00:00");
            }

            if (self::hasArg("before")) {
                $before = DateTime::createFromFormat(_FILE_DATE, self::arg("before"));
            } else {
                $before = DateTime::createFromFormat(_FILE_DATE,"01/01/2030-17:00:00");
            }

            self::writeln(implode("\n", QC::rhList(self::arg("rhinfo"), $g, $after, $before, self::hasArg("date"), self::hasArg("code"))));

            return 0;
        }
        if (self::hasArg("siinfo")) {
            if (self::hasArg("g")) {
                $group = self::arg("g");
            } else {
                $group = "%";
            }
            $qx = self::arg("siinfo");
            foreach (QC::siInfo($qx, $group) as $v) {
                $out = [];
                foreach($v as $k => $v) {
                    $out[] = $k . " => " . $v;
                }
                self::writeln(implode(", ", $out));
            }
            return 0;
        }
        if (self::hasArg("_rmst")) {
            var_dump(RMS::test());
            return 0;
        }
        if (self::hasArg("qsync")) {
            RMS::productByName("CF016A1P005M");
            return QCRMS::sync();
        }
        if (self::hasArg("rcheck")) { // rate limit test
            var_dump(sizeof(RMS::allAssetsByPid(RMS::productByName("CF016A1P005M")["id"])));
        }
        self::writeln("Nothing to do.");
        self::argDump();
        return 0;
    }
}

My::main();