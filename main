#!php
<?php

define("_SQL_DATE", "Y-m-d H:i:s");
define("_FILE_DATE", "d/m/Y-H:i:s");

require_once("lib/shell.php");
require_once("lib/qcutil.php");
require_once("lib/countrms/include.php");
require_once("lib/checkrms/include.php");


// required for qc

require_once("qc_lib/lib/protect/sql-auth.php");
require_once("qc_lib/lib/qc-data-types/const/qcdb.php");

class My extends Shell {

    public static function help(): void {
        self::writeln("There will be no help.");
    }

    public static function main(): int {
        if (self::hasArg("count")) {
            return CountRMS::main();
        }
        if (self::hasArg("check")) {
            return CheckRMS::main();
        }
        if (self::hasArg("_vsi")) {
            self::writeln(implode("\n", QCDB::colDump("StkItem")));
            return 0;
        }
        if (self::hasArg("_vpp")) {
            self::writeln(implode("\n", QCDB::colDump("ProdPattern")));
            return 0;
        }
        if (self::hasArg("ppsearch")) {
            $qx = self::arg("ppsearch");
            $x = 0;
            foreach (QC::ppMatch($qx) as $v) {
                self::writeln($v);
                $x ++;
            }
            self::writeln("Matched $x.");
            return 0;
        }
        if (self::hasArg("sisearch")) {
            $qx = self::arg("sisearch");
            $x = 0;
            foreach (QC::siMatch($qx) as $v) {
                self::writeln($v);
                $x++;
            }
            self::writeln("Matched $x.");
            return 0;
        }
        if (self::hasArg("rhinfo")) {
            if (self::hasArg("g")) {
                $g = self::arg("g");
            } else {
                $g = "%";
            }

            if (self::hasArg("after")) {
                $after = DateTime::createFromFormat(_FILE_DATE, self::arg("after"));
            } else {
                $after = DateTime::createFromFormat(_FILE_DATE, "01/01/1997-07:00:00");
            }

            if (self::hasArg("before")) {
                $before = DateTime::createFromFormat(_FILE_DATE, self::arg("before"));
            } else {
                $before = DateTime::createFromFormat(_FILE_DATE,"01/01/2030-17:00:00");
            }

            self::writeln(implode("\n", QC::rhList(self::arg("rhinfo"), $g, $after, $before, self::hasArg("date"), self::hasArg("code"))));

            return 0;
        }
        if (self::hasArg("siinfo")) {
            if (self::hasArg("g")) {
                $group = self::arg("g");
            } else {
                $group = "%";
            }
            $qx = self::arg("siinfo");
            foreach (QC::siInfo($qx, $group) as $v) {
                $out = [];
                foreach($v as $k => $v) {
                    $out[] = $k . " => " . $v;
                }
                self::writeln(implode(", ", $out));
            }
            return 0;
        }
        self::writeln("Nothing to do.");
        self::argDump();
        return 0;
    }
}

My::main();